// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.
// sources:
// assets/modelbox_client.toml
// assets/modelbox_server.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsModelbox_clientToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\x4b\x2d\x8a\x4f\x4c\x49\x29\x52\xb0\x55\x50\xb2\xb2\x30\xb0\x30\x55\xe2\x02\x04\x00\x00\xff\xff\x39\x18\x96\xde\x16\x00\x00\x00")

func assetsModelbox_clientTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_clientToml,
		"assets/modelbox_client.toml",
	)
}

func assetsModelbox_clientToml() (*asset, error) {
	bytes, err := assetsModelbox_clientTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_client.toml", size: 22, mode: os.FileMode(436), modTime: time.Unix(1659055246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModelbox_serverToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4d\x6b\xdb\x4c\x10\x80\xef\xfb\x2b\x06\xe5\xea\xd7\xf9\x70\xf2\x26\x14\x7a\x28\x3d\x15\x52\x68\x48\x6f\xc1\x88\xd5\xee\xc8\x5a\x22\xed\xa8\x3b\xe3\xb8\xfe\xf7\x65\x64\x29\x92\x3f\x8a\x69\xe9\xcd\x1a\xcd\xfa\x79\xe6\x63\x75\x01\xdf\x2b\x04\x16\x4a\x76\x85\xc0\x5b\x16\x6c\x60\xcd\xe8\xa1\xa4\xd4\xc5\x43\x5c\x81\x24\x1b\xa2\xfe\xb0\x49\x42\x69\x9d\xb0\xd1\x83\x81\x21\x30\x50\x2b\x81\xa2\xad\x21\x94\xd0\x90\xc7\xba\xa0\x9f\x1a\x67\xb1\x49\xd0\x83\x65\xb0\xd0\xa0\x58\x6f\xc5\x02\x63\x7a\x0b\x0e\xcd\x05\x7c\x23\xe6\x50\xd4\x08\x6f\xb6\x5e\x23\xc3\x7f\x50\x86\x1a\x77\x0a\x33\xe0\x85\x29\x6a\x2a\xf2\x41\xed\x23\x64\xe3\xeb\xcc\x98\x0b\x78\x3e\x23\xfd\x8e\x4c\x58\x5b\x15\x11\x3a\x5d\x08\xaf\x5d\xa5\x96\x9d\x3c\x83\x8d\x1e\x5c\x85\xee\xb5\xa5\x10\x85\x67\x5d\xa0\x0e\x11\x15\x46\xe5\xde\xd1\xe3\x1a\x42\x14\x5c\x25\xe5\xcd\xa0\xd9\xf2\x8f\x7a\x06\x2d\xb1\xac\x12\xb2\x19\x8c\xa6\x45\x8d\xf9\xa7\x8a\x12\xd2\xba\x0e\xcb\x4a\xc1\xf1\xfc\x37\xf4\x46\x9b\x27\xa1\x41\x76\xb6\x46\x5f\x98\x3e\x7f\x9f\xd9\xf4\x3d\xfc\x12\x05\x53\x69\x1d\x02\x45\xd8\x54\xc1\x55\x20\x15\x1e\x4d\x4b\xc7\x59\x07\x16\xec\x7a\xa7\x36\x11\x65\x43\xe9\x15\x1c\xc5\x88\x4e\x17\x80\xcd\x2e\x23\xb7\xde\x27\xa5\x7c\x78\xb8\x7a\xb8\xeb\x28\x9f\xbc\x0f\xfd\x8e\x38\x8a\x65\x58\xad\x93\xd5\xe7\xee\x9f\xc6\xa9\x42\x61\x75\x86\xd3\xb1\x9b\x97\xe9\x53\x3e\xe6\x2e\x8d\x26\xe7\x3e\x74\xa8\x4b\x69\xda\xcb\x61\xf7\xf4\x04\x9f\xe7\x8e\x8d\x9f\x94\x3b\x50\x0f\x27\x95\x8f\xd9\x4b\xd3\x5a\xa9\x8e\xa8\x73\x6f\xe5\x3c\xf4\x90\x04\x21\xea\x14\x75\x3d\x9e\x9f\x1e\x4f\x70\x87\xdd\x59\x9a\x8a\x58\x94\x7a\x7d\x7f\x33\xbf\xbe\x9f\x5f\xcd\x17\x99\x69\x29\x69\xec\xee\x76\x71\x63\xd6\x8c\x29\xda\xa6\x1b\xf0\x70\x2a\x33\xad\x65\xde\x50\xf2\xdd\xfd\x21\xca\x8c\x2f\xba\x24\xd0\xc0\xe0\xfe\x77\xde\x5f\xb7\xcf\x4f\x8f\x70\xc2\xb9\x5b\xfb\x5e\x18\x76\xa4\x77\xe9\x9b\x5e\x7a\x17\x5f\x2c\xae\xfe\xdf\x13\x4f\x44\xf2\x27\xd2\x9f\xf7\x4c\xf5\x4b\xb4\xf3\x9d\x5e\x80\x97\x83\x1b\x90\x4f\x5e\x9e\x68\xeb\xed\x3f\x6b\x6b\xde\x83\x33\xf8\x15\x00\x00\xff\xff\x34\xfc\x1e\xdf\x66\x05\x00\x00")

func assetsModelbox_serverTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_serverToml,
		"assets/modelbox_server.toml",
	)
}

func assetsModelbox_serverToml() (*asset, error) {
	bytes, err := assetsModelbox_serverTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_server.toml", size: 1382, mode: os.FileMode(436), modTime: time.Unix(1660719322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/modelbox_client.toml": assetsModelbox_clientToml,
	"assets/modelbox_server.toml": assetsModelbox_serverToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"modelbox_client.toml": &bintree{assetsModelbox_clientToml, map[string]*bintree{}},
		"modelbox_server.toml": &bintree{assetsModelbox_serverToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
