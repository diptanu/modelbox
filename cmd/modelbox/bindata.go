// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.
// sources:
// assets/modelbox_client.toml
// assets/modelbox_server.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsModelbox_clientToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\x4b\x2d\x8a\x4f\x4c\x49\x29\x52\xb0\x55\x50\xb2\xb2\x30\xb0\x30\x55\xe2\x02\x04\x00\x00\xff\xff\x39\x18\x96\xde\x16\x00\x00\x00")

func assetsModelbox_clientTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_clientToml,
		"assets/modelbox_client.toml",
	)
}

func assetsModelbox_clientToml() (*asset, error) {
	bytes, err := assetsModelbox_clientTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_client.toml", size: 22, mode: os.FileMode(436), modTime: time.Unix(1659055246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModelbox_serverToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x5f\x6f\xdb\x3a\x0c\xc5\xdf\xf5\x29\x08\xf7\x35\x49\xff\xa4\xbd\x2d\x2e\xd0\x87\x8b\xfb\x34\xa0\x03\x56\x74\x6f\x45\x60\xd0\x12\x1d\x0b\xb5\x45\x4f\xa4\xdb\xe5\xdb\x0f\x52\xe2\x24\x4d\x0d\x14\x1b\xf6\x96\x30\xa4\xce\xef\x88\x47\x39\x83\xef\x0d\x81\x28\x47\x5c\x13\xc8\x46\x94\x3a\x18\x84\x1c\xd4\x1c\x73\xdd\x87\x35\x68\x44\x1f\xd2\x07\x8c\xea\x6b\xb4\x2a\x26\x0d\x7a\x01\x2f\xc0\xbd\x7a\x0e\xd8\x82\xaf\xa1\x63\x47\x6d\xc5\x3f\x53\x5d\x14\xa3\x92\x03\x14\x40\xe8\x48\xd1\xa1\x22\x08\xc5\x57\x6f\xc9\x9c\xc1\x37\x16\xf1\x55\x4b\xf0\x8a\xed\x40\x02\x73\xa8\x7d\x4b\x5b\x84\x19\xc8\xd2\x8c\x62\xe5\x88\x77\x0f\xc5\xa1\xa5\x30\xe6\x0c\x9e\x3e\x01\xdf\xcb\x46\x6a\x31\xc1\x28\x4f\x9b\x91\xc1\x36\x89\x34\x1b\x10\xc0\xe0\xc0\x36\x64\x5f\x7a\xf6\x41\x65\x96\x0b\xad\x0f\x94\xc4\xb8\x7e\x37\xfa\xd1\x07\xf5\x0d\x75\x14\xb1\x9d\x41\xb7\x91\x1f\xed\x0c\x7a\x16\x5d\x47\x12\x33\x02\x1d\x7b\xda\xb7\x4f\x59\x52\x4e\xae\x4e\x4d\x45\x6f\x65\x31\xa9\xed\x43\x47\x1d\xc7\xcd\x0c\xd4\x77\x24\x16\x5b\x72\x95\xd9\x8d\x1c\xab\x8e\x8d\x59\xf4\x4b\x50\x8a\x35\x5a\x02\x0e\xf0\xd6\x78\xdb\x80\x36\xf4\x61\x6b\x69\xad\xad\x17\xa5\x7c\x7f\x89\x29\x90\xbe\x71\x7c\x01\xcb\x21\x90\x4d\x41\x10\xb3\xed\x28\xd1\xb9\x98\x84\xfe\xbd\xbb\xb8\xbb\xc9\x2a\xff\x39\xe7\x77\x59\xb1\x1c\x6a\xbf\x1e\x22\xa6\xef\xf9\xa4\xc3\x66\xa1\xc2\xb4\xc7\xaa\xe5\x6a\x04\x36\xcf\xa7\x61\x28\x0f\xfd\x2b\x93\x06\x4a\xe7\xb3\xdc\xb9\x76\xfd\xf9\x98\xc3\x74\x86\x14\x66\x62\x5c\x96\x2b\x13\x69\x9d\xd4\xef\xa1\x18\x64\x4e\x28\x3a\xbf\x2c\x4c\x35\xd8\x17\xd2\x54\x1c\x0f\x99\xef\xb7\xfd\xb9\x0b\x1f\x94\xd6\x31\x47\xed\x70\x79\xa3\x87\xd3\xe5\x97\x87\xee\x95\xe9\x51\x9b\x0f\xfc\x0b\x87\xfa\xb9\xe8\xa9\x12\xf8\x90\x92\x91\x12\xf7\xf4\xf8\x30\xa1\x3b\xc6\x71\x65\x1a\x96\xec\xf5\xf2\xf6\x6a\x71\x79\xbb\xb8\x58\x2c\x0b\xd3\x73\x4c\xb5\x9b\xeb\xe5\x95\x19\x84\x62\xc0\x2e\x27\x66\x9c\x2a\x4c\x8f\x22\x6f\x1c\x5d\x7e\x91\xcc\x85\x71\x55\x6e\x82\xe3\x6b\xfb\x33\xee\xaf\x9b\xa7\xc7\x07\x98\x60\xce\x2f\x69\x07\x0c\x5b\xa5\x3d\xf4\xd5\x0e\x7a\x5b\x5f\x2e\x2f\xfe\x79\x07\x1e\x99\xf5\x77\xa0\xff\x7f\x47\x9a\xfe\xdf\xb6\xbc\xc7\x2f\xea\xf9\xe4\x49\x95\x47\x3f\x4e\x5c\xeb\xf5\x5f\xbb\xd6\x72\x27\x5c\xc0\xaf\x00\x00\x00\xff\xff\xb6\x18\x11\x3f\xbc\x05\x00\x00")

func assetsModelbox_serverTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_serverToml,
		"assets/modelbox_server.toml",
	)
}

func assetsModelbox_serverToml() (*asset, error) {
	bytes, err := assetsModelbox_serverTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_server.toml", size: 1468, mode: os.FileMode(436), modTime: time.Unix(1661326439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/modelbox_client.toml": assetsModelbox_clientToml,
	"assets/modelbox_server.toml": assetsModelbox_serverToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"modelbox_client.toml": &bintree{assetsModelbox_clientToml, map[string]*bintree{}},
		"modelbox_server.toml": &bintree{assetsModelbox_serverToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
