// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.
// sources:
// assets/modelbox_client.toml
// assets/modelbox_server.toml
// assets/modelbox_server_compose.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsModelbox_clientToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\x4b\x2d\x8a\x4f\x4c\x49\x29\x52\xb0\x55\x50\xb2\xb2\x30\xb0\x30\x55\xe2\x02\x04\x00\x00\xff\xff\x39\x18\x96\xde\x16\x00\x00\x00")

func assetsModelbox_clientTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_clientToml,
		"assets/modelbox_client.toml",
	)
}

func assetsModelbox_clientToml() (*asset, error) {
	bytes, err := assetsModelbox_clientTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_client.toml", size: 22, mode: os.FileMode(436), modTime: time.Unix(1662928984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModelbox_serverToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\xdb\x30\x0c\x85\xef\xfa\x15\x84\x7b\x4d\xd2\xa6\xe9\xda\x62\x40\x0f\xc3\x4e\x03\x3a\x60\x45\x77\x2b\x02\x43\x96\x68\x5b\xa8\x2c\x7a\x22\xdd\x2e\xff\x7e\x90\x12\x27\x69\x6a\xa0\xd8\xb0\x5b\x42\x93\x7e\xdf\xa3\x9e\x7c\x06\x3f\x5b\x04\x16\x8a\xba\x41\xe0\x0d\x0b\x76\x30\x30\x5a\xa8\x29\xe6\xba\x0b\x0d\x48\xd4\x2e\xa4\x1f\x3a\x8a\xab\xb5\x11\x56\x69\xd0\x31\x38\x06\xea\xc5\x51\xd0\x1e\x5c\x0d\x1d\x59\xf4\x15\xfd\x4e\x75\x16\x1d\x05\x2d\x68\x06\x0d\x1d\x8a\xb6\x5a\x34\x30\xc6\x17\x67\x50\x9d\xc1\x0f\x62\x76\x95\x47\x78\xd1\x7e\x40\x86\x39\xd4\xce\xe3\x16\x61\x06\xbc\x52\xa3\x58\x39\xe2\xdd\x41\x71\x68\x29\x94\x3a\x83\xc7\x0f\xc0\xf7\xb2\x11\xbd\x4e\x30\x42\xd3\x66\x78\x30\x6d\x22\xcd\x06\x18\x74\xb0\x60\x5a\x34\xcf\x3d\xb9\x20\x3c\xcb\x05\xef\x02\x26\x31\xaa\xdf\x8c\xbe\xf7\x81\x7d\x8b\x1d\x46\xed\x67\xd0\x6d\xf8\x97\x9f\x41\x4f\x2c\x4d\x44\x56\x23\xd0\xb1\xa7\x7d\xfb\x94\x25\xa1\xe4\xea\xd4\x54\x74\x86\x17\x93\xda\x2e\x74\xd8\x51\xdc\xcc\x40\x5c\x87\x6c\xb4\x47\x5b\xa9\xdd\xc8\xb1\xea\xd8\x98\x45\xbf\x05\xc1\x58\x6b\x83\x40\x01\x5e\x5b\x67\x5a\x90\x16\xdf\x9d\x5a\x3a\x56\xef\x58\x30\xef\x2f\x31\x05\x94\x57\x8a\xcf\x60\x28\x04\x34\x29\x08\xac\x9a\xd8\x9b\x72\xdb\x56\x6a\x6b\x63\x52\xfb\x7c\x7b\x71\x7b\x5d\xa8\x56\xa4\x9f\x7a\xb4\xcc\x14\x5f\xac\x75\xbb\x2c\x19\x0a\xb5\x6b\x86\xa8\xd3\xff\xac\x74\x38\x79\xa8\x74\x3a\xe7\xca\x53\x35\x1a\x52\x4f\xa7\x61\x29\x0f\xfd\x6b\x95\x06\x4a\xeb\xb2\xdc\xb9\x74\xfd\xf9\x98\xd3\xf4\x0e\x2e\xd4\xc4\x38\xaf\xd6\x2a\x62\x93\xd4\xef\xa0\x18\x78\x8e\x9a\x65\xbe\x2c\x54\x35\x98\x67\x94\x54\x1c\x5f\x32\xdf\xa7\xe1\x63\x17\x2e\x08\x36\x31\x47\xf1\xb0\xdc\xd1\xc3\x69\x38\xca\x43\xf7\x5a\xf5\x5a\xda\x77\xfc\x0b\xab\xe5\x63\xd1\x53\x25\x70\x21\x25\x27\x25\xf2\xf1\xe1\x7e\x42\x77\x8c\xeb\x5a\xb5\xc4\xd9\xeb\xf2\xe6\x72\xb1\xbc\x59\x5c\x2c\x56\x85\xea\x29\xa6\xda\xa7\xab\xd5\xa5\x1a\x18\x63\xd0\x5d\x4e\xd4\x38\x55\xa8\x5e\x33\xbf\x52\xb4\xf9\xc6\x12\x15\xca\x56\xb9\x09\x8e\xd7\xf6\x6f\xdc\xdf\x37\x8f\x0f\xf7\x30\xc1\x9c\x6f\xda\x0e\x18\xb6\x4a\x7b\xe8\xcb\x1d\xf4\xb6\xbe\x5a\x5d\x5c\xbf\x01\x8f\x44\xf2\x37\xd0\x5f\xdf\x90\xa6\xef\xdf\x96\xf7\xf8\xc6\x3d\x9d\x5c\xb9\xf2\xe8\xe1\xc4\x5a\xaf\xfe\xdb\x5a\xcb\x9d\x70\x01\x7f\x02\x00\x00\xff\xff\xa3\x65\x2c\xa3\xdc\x05\x00\x00")

func assetsModelbox_serverTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_serverToml,
		"assets/modelbox_server.toml",
	)
}

func assetsModelbox_serverToml() (*asset, error) {
	bytes, err := assetsModelbox_serverTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_server.toml", size: 1500, mode: os.FileMode(436), modTime: time.Unix(1664516262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModelbox_server_composeToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x6f\xdb\x3c\x0c\xc6\xef\xfa\x14\x84\x7b\x4d\xdc\xfc\x79\xfb\xb6\x18\xd0\xc3\xb0\xd3\x80\x0d\xd8\xd0\xdd\x8a\xc0\xa0\x25\x3a\x16\x6a\x8b\x9e\x48\xb7\xcb\xb7\x1f\xe4\xc4\x4d\x9a\x18\x28\x36\xec\x96\x50\xa4\x9e\x1f\xc9\x47\xbe\x82\x1f\x35\x81\x28\x47\xdc\x12\xc8\x4e\x94\x5a\xe8\x85\x1c\x54\x1c\x87\xb8\x0f\x5b\xd0\x88\x3e\xa4\x1f\x18\xd5\x57\x68\x55\x4c\x2a\xf4\x02\x5e\x80\x3b\xf5\x1c\xb0\x01\x5f\x41\xcb\x8e\x9a\x92\x7f\xa5\xb8\x28\x46\x25\x07\x28\x80\xd0\x92\xa2\x43\x45\x10\x8a\xcf\xde\x92\xb9\x82\x6f\x2c\xe2\xcb\x86\xe0\x19\x9b\x9e\x04\xe6\x50\xf9\x86\xf6\x08\x33\x90\xb5\x19\xc5\x8a\x11\xef\x1e\xb2\x63\x4a\x66\xcc\x15\x3c\xbc\x03\xfe\x2a\x1b\xa9\xc1\x04\xa3\x3c\xdd\x8c\xf4\xb6\x4e\xa4\x43\x03\x02\x18\x1c\xd8\x9a\xec\x53\xc7\x3e\xa8\xcc\x86\x40\xe3\x03\x25\x31\xae\xde\x94\x5e\xf6\x41\x5d\x4d\x2d\x45\x6c\x66\xd0\xee\xe4\x67\x33\x83\x8e\x45\xb7\x91\xc4\x8c\x40\xa7\x3d\x8d\x87\x53\x1d\x29\xa7\xa6\xce\x7b\x8a\xde\x4a\x3e\x29\xed\x43\x4b\x2d\xc7\xdd\x0c\xd4\xb7\x24\x16\x1b\x72\xa5\x39\x94\x9c\x8a\x9e\x1c\x0f\xba\x9f\x83\x52\xac\xd0\x12\x70\x80\x97\xda\xdb\x1a\xb4\xa6\x8b\xbd\xa5\xc5\x36\x5e\x94\x86\x09\x26\xac\x40\xfa\xc2\xf1\x09\x2c\x87\x40\x36\x59\x41\xcc\x3e\xa3\x40\xe7\x62\xd2\x5a\xde\xae\xf2\xd5\x32\x5f\xe4\xab\x0f\x77\x8b\xbb\x9b\x41\xef\xa3\x73\xfe\xe0\x1b\xcb\xa1\xf2\xdb\x3e\x62\xfa\x3f\xdc\x79\xdc\x32\x94\x98\x76\x5a\x36\x5c\x8e\xf4\xe6\xf1\xdc\x18\xc5\x31\x7f\x63\x52\x41\xe1\xfc\x20\x7c\xad\x6d\x77\x3d\x7a\x32\xdd\x91\x66\x7c\x59\x2e\xeb\x8d\x89\xb4\x4d\xea\xf7\x90\xf5\x32\x27\x14\x9d\x2f\x33\x53\xf6\xf6\x89\x34\x05\xc7\x4b\xe6\xaf\x9b\x7f\xbf\x0b\x1f\x94\xb6\x71\xb0\xdd\x71\x8c\x63\x0f\xe7\x46\x28\x8e\xd9\x1b\xd3\xa1\xd6\x17\xfc\xb9\x43\x7d\x5f\xf4\x5c\x09\x7c\x48\x36\x49\x06\x7b\xf8\xfe\x65\x42\x77\x74\xdf\xc6\xd4\x2c\xfa\xba\xae\x45\xbe\xc8\x6f\x32\xd3\x71\x4c\xb1\x9b\xff\xd6\x2b\xd3\x0b\xc5\x80\xed\x99\x67\x3b\x14\x79\xe1\xe8\x86\xd7\xc9\x9c\x19\x57\x0e\x49\x70\x3a\xb6\xbf\xe3\xfe\xba\x9b\x46\x1e\x1e\xd5\x81\x17\xf6\x42\x89\x79\x79\x9b\x2c\x76\x60\xde\xc7\xd7\xeb\xc5\xff\x6f\xb8\x23\xb3\xfe\x09\xf3\xa7\x37\xa0\xe9\x53\xb7\xc7\x3d\x7d\x5d\x8f\x67\xcf\xab\x38\x39\x9c\x98\xea\xed\x3f\x9b\x6a\x71\x10\xce\xcc\xef\x00\x00\x00\xff\xff\x44\x56\x3d\x3f\xc7\x05\x00\x00")

func assetsModelbox_server_composeTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_server_composeToml,
		"assets/modelbox_server_compose.toml",
	)
}

func assetsModelbox_server_composeToml() (*asset, error) {
	bytes, err := assetsModelbox_server_composeTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_server_compose.toml", size: 1479, mode: os.FileMode(436), modTime: time.Unix(1664148834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/modelbox_client.toml":         assetsModelbox_clientToml,
	"assets/modelbox_server.toml":         assetsModelbox_serverToml,
	"assets/modelbox_server_compose.toml": assetsModelbox_server_composeToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"modelbox_client.toml":         &bintree{assetsModelbox_clientToml, map[string]*bintree{}},
		"modelbox_server.toml":         &bintree{assetsModelbox_serverToml, map[string]*bintree{}},
		"modelbox_server_compose.toml": &bintree{assetsModelbox_server_composeToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
