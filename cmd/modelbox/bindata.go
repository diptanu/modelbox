// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.
// sources:
// assets/modelbox_client.toml
// assets/modelbox_server.toml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsModelbox_clientToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\x4b\x2d\x8a\x4f\x4c\x49\x29\x52\xb0\x55\x50\xb2\xb2\x30\xb0\x30\x55\xe2\x02\x04\x00\x00\xff\xff\x39\x18\x96\xde\x16\x00\x00\x00")

func assetsModelbox_clientTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_clientToml,
		"assets/modelbox_client.toml",
	)
}

func assetsModelbox_clientToml() (*asset, error) {
	bytes, err := assetsModelbox_clientTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_client.toml", size: 22, mode: os.FileMode(436), modTime: time.Unix(1659055246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModelbox_serverToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xcd\x6e\xdb\x30\x0c\x80\xef\x7a\x0a\x22\xbd\x66\xe9\x4f\xda\xb5\x18\xb0\xc3\xb0\xd3\x80\x0e\x58\xd1\xdd\x8a\xc2\xa0\x25\x3a\x16\x2a\x8b\x9e\xc8\xb4\xcb\xdb\x0f\x52\xe2\xc6\x4d\x0d\x04\x1b\x76\x8b\x69\x32\xdf\x47\x91\xf2\x09\xfc\x6c\x09\x44\x39\xe1\x8a\x40\x36\xa2\xd4\xc1\x5a\xc8\x41\xc3\xa9\xc4\x7d\x5c\x81\x26\xf4\x31\xff\xc0\xa4\xbe\x41\xab\x62\x72\xa1\x17\xf0\x02\xdc\xab\xe7\x88\x01\x7c\x03\x1d\x3b\x0a\x35\xff\xce\x71\x51\x4c\x4a\x0e\x50\x00\xa1\x23\x45\x87\x8a\x20\x94\x9e\xbd\x25\x73\x02\x3f\x58\xc4\xd7\x81\xe0\x19\xc3\x9a\x04\x3e\x40\xe3\x03\x6d\x15\xe6\x20\x4b\x53\x07\xae\xab\x41\xed\x33\xcc\xf6\xaf\x67\xc6\x9c\xc0\xfd\x11\xe9\x57\x64\xa2\x80\x59\x44\x79\xba\x11\x59\xdb\x36\x5b\x16\x79\x01\x8c\x0e\x6c\x4b\xf6\xa9\x67\x1f\x55\xe6\x25\x10\x7c\xa4\x0c\xe3\xe6\x4d\xe9\xfb\x1e\xa8\x6f\xa9\xa3\x84\x61\x0e\xdd\x46\x7e\x85\x39\xf4\x2c\xba\x4a\x24\x66\x10\x1a\xf7\xf4\x9a\x3e\xd5\x92\x72\xee\xea\xb0\xa9\xe4\xad\x2c\x26\xd9\x3e\x76\xd4\x71\xda\xcc\x41\x7d\x47\x62\x31\x90\xab\xcd\xae\x64\x4c\x1d\x12\x0b\xf4\x5b\x54\x4a\x0d\x5a\x02\x8e\xf0\xd2\x7a\xdb\x82\xb6\xf4\x6e\x62\x79\xa4\xc1\x8b\x52\x39\xbf\xec\x14\x49\x5f\x38\x3d\x81\xe5\x18\xc9\xe6\x25\x10\xb3\xcd\xa8\xd0\xb9\x94\x41\x9f\x6e\xce\x6e\xae\x0a\xe5\x8b\x73\x7e\xb7\x27\x96\x63\xe3\x57\xeb\x84\xf9\xb9\xfc\xd3\x7e\xb2\x50\x63\x9e\xe3\x78\xf4\xe6\x61\xfc\x54\xed\x73\x1f\x4d\x4e\xae\x9c\x2f\xa8\x53\xed\xfa\xd3\x61\xff\x72\x85\x1c\xe7\xfa\xa8\xb4\x4a\x65\x39\xf6\xed\x0e\xd4\xc3\x71\x55\xfb\xec\x47\xd3\xa3\xb6\xef\xa8\x0b\x87\x7a\x1c\x7a\x48\x02\x1f\xf3\x2c\xf3\x8e\xdc\xdf\xdd\x4e\x70\x87\x05\x7a\x34\x2d\x8b\x66\xea\xf9\xf5\xc5\xe2\xfc\x7a\x71\xb6\x58\xce\x4c\xcf\x29\xc7\xae\x2e\x97\x17\x66\x2d\x94\x22\x76\x65\xc6\x43\xd5\xcc\xf4\x28\xf2\xc2\xc9\x95\x3b\xc4\x3c\x33\xae\x2e\x49\x90\x03\x83\xfb\xbf\x79\x7f\xdf\xdc\xdf\xdd\xc2\x84\x73\xd9\xfd\x9d\x30\x6c\x49\xaf\xd2\x17\x3b\xe9\x6d\x7c\xb9\x3c\xfb\xf8\x46\x3c\x31\xeb\xdf\x48\x7f\x7d\x63\x9a\xbf\x46\x5b\xdf\xf1\x1d\x78\x38\xb8\x04\xd5\xe8\xe5\xc4\xb1\x5e\xfe\xb7\x63\xad\x76\xe0\x19\xfc\x09\x00\x00\xff\xff\x5a\x42\x94\x48\x6a\x05\x00\x00")

func assetsModelbox_serverTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_serverToml,
		"assets/modelbox_server.toml",
	)
}

func assetsModelbox_serverToml() (*asset, error) {
	bytes, err := assetsModelbox_serverTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_server.toml", size: 1386, mode: os.FileMode(436), modTime: time.Unix(1660753801, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/modelbox_client.toml": assetsModelbox_clientToml,
	"assets/modelbox_server.toml": assetsModelbox_serverToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"modelbox_client.toml": &bintree{assetsModelbox_clientToml, map[string]*bintree{}},
		"modelbox_server.toml": &bintree{assetsModelbox_serverToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
