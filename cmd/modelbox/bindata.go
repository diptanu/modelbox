// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.
// sources:
// assets/modelbox_client.yaml
// assets/modelbox_server.yaml
// assets/modelbox_server_compose.yaml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsModelbox_clientYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\x4b\x2d\x8a\x4f\x4c\x49\x29\xb2\x52\x50\xb2\xb2\x30\xb0\x30\x55\xe2\x02\x04\x00\x00\xff\xff\x08\x90\x19\xd9\x15\x00\x00\x00")

func assetsModelbox_clientYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_clientYaml,
		"assets/modelbox_client.yaml",
	)
}

func assetsModelbox_clientYaml() (*asset, error) {
	bytes, err := assetsModelbox_clientYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_client.yaml", size: 21, mode: os.FileMode(436), modTime: time.Unix(1667291504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModelbox_serverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x6f\xe3\x36\x10\xc5\xef\xfc\x14\x03\xe5\x6a\x7b\xe3\x68\xff\x41\xb7\x62\x4f\x05\x76\x81\x2e\xd2\xbb\x40\x91\x63\x8b\x30\x45\xca\x9c\x71\x52\x7f\xfb\x62\x28\xc9\x76\x2c\xb5\x41\x8b\xbd\x49\x24\x47\xef\xf7\xa8\x37\xf3\x00\x7f\xb6\x08\xc4\x31\xe9\x3d\x02\x9d\x89\xb1\x83\x13\xa1\x85\x5d\x4c\x79\xdd\x85\x3d\x70\xd2\x2e\xc8\x83\x4e\xec\x76\xda\x30\x29\x29\x74\x04\x8e\x20\xf6\xec\x62\xd0\x1e\xdc\x0e\xba\x68\xd1\x37\xf1\x2f\x59\x27\xd6\x89\xd1\x82\x26\xd0\xd0\x21\x6b\xab\x59\x03\x61\x7a\x71\x06\xd5\x03\xfc\x11\x89\x5c\xe3\x11\x5e\xb4\x3f\x21\xc1\x1a\x76\xce\xe3\x80\xb0\x02\x2a\xd5\x24\x56\x8f\x78\x15\x14\xd7\x13\x85\x52\x0f\xf0\xfc\x0e\xf7\x45\x35\xa1\xd7\xc2\xc2\x71\xd9\x0b\x9d\x4c\x2b\xa0\x99\x9f\x40\x07\x0b\xa6\x45\x73\xe8\xa3\x0b\x4c\xab\xbc\xe0\x5d\x40\x11\x8b\xbb\x37\xa5\x73\x1b\xd8\xb7\xd8\x61\xd2\x7e\x05\xdd\x99\x8e\x7e\x05\x7d\x24\xde\x27\x24\x35\x01\xdd\x58\xa2\xa3\x77\x8c\xe5\x92\x1f\x8e\x62\xe9\xde\x51\x72\x86\x36\x8b\xc2\x2e\x74\xd8\xc5\x74\x5e\x01\xbb\x0e\xc9\x68\x8f\xb6\x51\x63\xc9\x8d\xe4\x74\x2e\x6b\xfe\x1e\x18\xd3\x4e\x1b\x84\x18\xe0\xb5\x75\xa6\x05\x6e\x71\xf6\xc3\xe4\x8f\x7a\x47\x8c\xf9\xee\x04\x29\x20\xbf\xc6\x74\x00\x13\x43\x40\x23\x19\x20\xb5\x4f\xbd\xa9\x87\x63\xb5\xb6\x36\x55\x50\x54\x5f\x1f\xbf\x7e\x2e\x54\xcb\xdc\x2f\xec\x6c\x33\xc3\x37\x7f\x22\xc6\x04\x3f\xb0\x6b\x30\x51\xeb\x7a\x68\xb4\x39\x60\xb0\xca\x0c\x5b\x75\x77\xd9\x92\x3b\x63\xcd\xce\xe4\xd2\xdf\xac\x75\x63\xfe\x4c\x0c\x3b\xb7\x3f\x25\x2d\xef\x19\xf1\x1a\x17\x68\xb4\x84\xa3\xf1\xb1\x99\x2e\x62\x96\xaf\xfa\x7a\xbc\x52\x90\x2b\x6a\xeb\x84\xf4\x03\x77\xfd\x87\x29\xdb\xf2\x0d\x2a\xd4\xbc\x9c\x4a\x29\x4b\xb8\x77\x31\x54\x50\x9c\x68\x8d\x9a\x78\xbd\x2d\xe4\x63\x27\x73\x40\xae\xa0\x98\xbe\xb2\xbe\x64\xe8\x7d\x1b\x2e\x30\xee\x53\x0e\xf0\xf5\xb7\x8c\x26\xee\x13\x55\x8f\x79\x12\x94\x5e\x73\x7b\x4f\xbf\xb1\x9a\xdf\x57\xbc\x97\x01\x17\x24\x6f\x12\xe2\xe7\x9f\xdf\xe7\xa2\x53\xc0\x45\xb5\x8d\x24\x46\xb7\x5f\x9e\x36\xdb\x2f\x9b\xc7\x4d\x29\xfe\xfb\x98\xb8\x82\x4f\x1f\xcb\x27\x05\x12\xea\x14\x74\x27\x51\x9c\x0a\xf3\x19\x4d\xf4\x1a\x93\x95\x3e\x8f\x51\x56\x6c\x33\x1e\x9b\xe8\xff\x1f\xf9\x8f\xf3\xf3\xcf\xef\x30\xa7\xce\xdd\xb9\x84\xfc\x74\x45\x2e\xcb\xc7\xcf\x6f\x91\x53\x8c\xfc\x5f\x70\xbf\xbd\x61\x94\x69\x39\x90\xfe\x4b\x8f\xd6\x37\x7b\x4b\x7c\x1f\x7f\xe1\x95\xd6\xa3\x76\x01\x73\xd8\x61\xf2\x48\xaf\x81\x99\xb5\xa8\x1a\x76\xea\x85\x0e\x55\x00\xe3\x9b\x3c\xae\xc1\x09\x80\x98\xc8\xbd\x30\xf8\xa9\x47\x8e\x9b\x65\x19\x1e\xe3\x6c\xf0\xd1\x68\x9f\x6d\x0f\xe3\x23\x57\xc9\x08\x59\xda\xdf\x2e\xdc\x73\x46\x3f\xfa\x0b\x77\x77\xc3\x7d\xf4\xff\x00\xed\x51\x7a\x5e\xda\x2d\xbd\x68\x5f\xc1\x27\x52\x20\x17\xe0\xb1\x6e\x51\x27\x6e\x50\x73\x6d\x47\x89\x0a\xca\x47\xfa\x3b\x00\x00\xff\xff\x3f\xcc\x49\x6b\x40\x07\x00\x00")

func assetsModelbox_serverYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_serverYaml,
		"assets/modelbox_server.yaml",
	)
}

func assetsModelbox_serverYaml() (*asset, error) {
	bytes, err := assetsModelbox_serverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_server.yaml", size: 1856, mode: os.FileMode(436), modTime: time.Unix(1667763212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModelbox_server_composeYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\x4f\x6f\x9c\x30\x10\xc5\xef\xfe\x14\x23\x72\xdd\xdd\x6c\xb2\xdd\x24\xe2\x56\xf5\x54\xa9\x95\x5a\xa5\x77\x64\xec\x01\xac\x18\x9b\x78\x86\xa4\xfb\xed\xab\x21\x10\xf6\x0f\x6a\xa4\x96\xd3\xae\x3d\xe3\xf7\x7b\xc3\x33\x57\xf0\xab\x41\x20\x8e\x49\xd7\x08\x74\x20\xc6\x16\x7a\x42\x0b\x55\x4c\xc3\xba\x0b\x35\x70\xd2\x2e\xc8\x0f\x9d\xd8\x55\xda\x30\x29\x69\x74\x04\x8e\x20\x76\xec\x62\xd0\x1e\x5c\x05\x6d\xb4\xe8\xcb\xf8\x5b\xd6\x89\x75\x62\xb4\xa0\x09\x34\xb4\xc8\xda\x6a\xd6\x40\x98\x5e\x9c\x41\x75\x05\x3f\x22\x91\x2b\x3d\xc2\x8b\xf6\x3d\x12\xac\xa1\x72\x1e\xdf\x10\x56\x40\x3b\x35\x89\x15\x23\x5e\x0e\xd9\x5c\x91\x29\x75\x05\x8f\x1f\x70\xbf\xab\x26\xf4\x5a\x58\x38\x2e\x7b\xa1\xde\x34\x02\x3a\xf0\x13\xe8\x60\xc1\x34\x68\x9e\xba\xe8\x02\xd3\x6a\x58\xf0\x2e\xa0\x88\xc5\xea\xa4\xf5\xd2\x06\x76\x0d\xb6\x98\xb4\x5f\x41\x7b\xa0\x67\xbf\x82\x2e\x12\xd7\x09\x49\x4d\x40\x47\x96\xa6\xbd\x25\x43\x1c\xc5\xd3\xb9\xa5\xe4\x0c\x6d\x16\x95\x5d\x68\xb1\x8d\xe9\xb0\x02\x76\x2d\x92\xd1\x1e\x6d\xa9\xc6\x96\x23\xcd\xa3\xdd\x41\xf6\x6b\x60\x4c\x95\x36\x08\x31\xc0\x6b\xe3\x4c\x03\xdc\xe0\xc5\x4b\x93\xb7\xea\x1d\x31\x0e\xf3\x13\xaa\x80\xfc\x1a\xd3\x13\x98\x18\x02\x1a\xc9\x01\xa9\x3a\x75\xa6\x78\x2b\x2b\xb4\xb5\x29\x87\x2c\x7f\xd8\x3e\xec\x33\xd5\x30\x77\x0b\x3b\x37\x99\x52\xc6\xf7\xc4\x98\x8a\x16\xdb\x12\x13\x35\xae\xcb\x21\x1b\xa6\x37\x00\x7e\xb6\xd6\x8d\x29\x33\x31\x54\xae\xee\x93\x96\xff\x03\xc4\x1c\x0a\x28\xb5\x44\xa0\xf4\xb1\x9c\xdc\x5e\xa4\xa8\x98\xcb\x73\x05\x43\x47\x61\x9d\xb0\x5c\x73\xdb\x5d\x4f\x09\x96\x33\xe4\x9d\x5c\xb4\xd3\x4e\xda\x12\xd6\x2e\x86\x1c\xb2\x9e\xd6\xa8\x89\xd7\x37\x99\x1c\xd6\x9b\x27\x64\x21\x1f\x4f\x59\xbf\x27\xe5\x63\x1b\x2e\x30\xd6\x69\x88\xe9\x3c\xf8\xd1\xc4\x79\x6e\x8a\xb9\x58\x68\x3a\xcd\xcd\xb9\x81\x8d\xd5\xfc\xb1\xe8\xb9\x12\xb8\x20\xb9\x92\x44\x3e\xfe\xfc\x76\xa9\x3b\xa5\x55\x54\x9b\x48\xe2\xf5\xe6\xfe\x76\x73\xbb\xdd\x6c\x37\x7b\x19\x41\x17\x13\xe7\xb0\xff\xb4\xbb\x55\x20\xe1\x4d\x41\xb7\xa7\x31\x17\x5c\xa2\xd7\x98\xac\x5c\xe8\x18\x65\xc5\x96\x63\xd9\x44\xff\x6f\xe4\xdf\x0f\x8b\xd0\x43\x8e\x66\xe2\xe1\x99\xb1\xef\x66\xec\xe1\xd9\xed\xb6\x77\x27\xec\x90\xa5\x18\xf9\x14\xfc\x82\x5c\x8e\x3c\x81\xff\x72\x42\x2c\x1f\xc9\x37\xee\xbf\xdc\xcc\xe2\x68\x6f\x69\xc0\xf7\xff\x3f\xe0\x23\xca\x62\x54\xcf\x94\xa2\x67\x5f\x2c\xdc\x40\x05\xe0\x51\xee\x87\xa4\x2d\xbd\x68\x9f\xc3\x9e\x14\xc8\x97\xdd\x63\xd1\xa0\x4e\x5c\xa2\xe6\xc2\x8e\x2e\x73\xd8\x6d\xe9\x4f\x00\x00\x00\xff\xff\xef\x76\x98\x64\x52\x06\x00\x00")

func assetsModelbox_server_composeYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_server_composeYaml,
		"assets/modelbox_server_compose.yaml",
	)
}

func assetsModelbox_server_composeYaml() (*asset, error) {
	bytes, err := assetsModelbox_server_composeYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_server_compose.yaml", size: 1618, mode: os.FileMode(436), modTime: time.Unix(1667291504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/modelbox_client.yaml":         assetsModelbox_clientYaml,
	"assets/modelbox_server.yaml":         assetsModelbox_serverYaml,
	"assets/modelbox_server_compose.yaml": assetsModelbox_server_composeYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"modelbox_client.yaml":         &bintree{assetsModelbox_clientYaml, map[string]*bintree{}},
		"modelbox_server.yaml":         &bintree{assetsModelbox_serverYaml, map[string]*bintree{}},
		"modelbox_server_compose.yaml": &bintree{assetsModelbox_server_composeYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
