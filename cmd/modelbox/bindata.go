// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.
// sources:
// assets/modelbox_client.yaml
// assets/modelbox_server.yaml
// assets/modelbox_server_compose.yaml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsModelbox_clientYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x2d\x2a\x4b\x2d\x8a\x4f\x4c\x49\x29\xb2\x52\x50\xb2\xb2\x30\xb0\x30\x55\xe2\x02\x04\x00\x00\xff\xff\x08\x90\x19\xd9\x15\x00\x00\x00")

func assetsModelbox_clientYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_clientYaml,
		"assets/modelbox_client.yaml",
	)
}

func assetsModelbox_clientYaml() (*asset, error) {
	bytes, err := assetsModelbox_clientYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_client.yaml", size: 21, mode: os.FileMode(436), modTime: time.Unix(1665357777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModelbox_serverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xcd\x6e\xeb\x36\x10\x85\xf7\x7c\x8a\x81\xb2\xb5\x7d\xed\xf8\xfe\x41\xbb\x22\xab\x02\x09\xd0\x20\xdd\x0b\x14\x39\xb6\x08\x53\xa4\xc2\x19\x27\xf5\xdb\x17\x43\x49\xb6\x63\xa9\x0d\x5a\xdc\x9d\x44\xce\xe8\x7c\x87\x3a\xc3\x3b\xf8\xb3\x41\x20\x8e\x49\xef\x11\xe8\x44\x8c\x2d\x1c\x09\x2d\xec\x62\xca\xeb\x2e\xec\x81\x93\x76\x41\x1e\x74\x62\xb7\xd3\x86\x49\x49\xa3\x23\x70\x04\xb1\x63\x17\x83\xf6\xe0\x76\xd0\x46\x8b\xbe\x8e\x7f\xc9\x3a\xb1\x4e\x8c\x16\x34\x81\x86\x16\x59\x5b\xcd\x1a\x08\xd3\x9b\x33\xa8\xee\xe0\x8f\x48\xe4\x6a\x8f\xf0\xa6\xfd\x11\x09\x96\xb0\x73\x1e\x7b\x84\x05\xd0\x56\x8d\x62\xd5\x80\x57\x42\x71\xa9\x28\x94\xba\x83\x97\x4f\xb8\xcf\xaa\x09\xbd\x16\x16\x8e\xf3\x5e\xe8\x68\x1a\x01\xcd\xfc\x04\x3a\x58\x30\x0d\x9a\x43\x17\x5d\x60\x5a\xe4\x05\xef\x02\x8a\x58\xdc\x7d\x68\x9d\xda\xc0\xae\xc1\x16\x93\xf6\x0b\x68\x4f\xf4\xea\x17\xd0\x45\xe2\x7d\x42\x52\x23\xd0\x95\xa5\x73\xf5\x9c\x23\x8e\x62\xea\xd6\x53\x72\x86\x56\xb3\xd2\x2e\xb4\xd8\xc6\x74\x5a\x00\xbb\x16\xc9\x68\x8f\xb6\x56\x43\xcb\x95\xe8\x58\x97\x35\x7f\x0f\x8c\x69\xa7\x0d\x42\x0c\xf0\xde\x38\xd3\x00\x37\x38\xf9\x65\xf2\x4f\xbd\x23\xc6\x7c\x7a\x82\x14\x90\xdf\x63\x3a\x80\x89\x21\xa0\x91\x14\x90\xda\xa7\xce\x54\x7d\x59\xa5\xad\x4d\x25\x14\xe5\xcf\xf5\xcf\xef\x85\x6a\x98\xbb\x99\x9d\x4d\x66\x78\xf0\x47\x62\x4c\xf0\x84\x6d\x8d\x89\x1a\xd7\x41\xad\xcd\x01\x83\x55\xa6\xdf\xaa\xda\xf3\x56\x09\x05\xb1\x66\x67\x72\xeb\x6f\xd6\xba\x21\x81\x26\x86\x9d\xdb\x1f\x93\x96\xf7\x8c\x78\x09\x0c\xd4\x5a\xe2\x51\xfb\x58\x8f\x07\x31\x49\x58\x75\x29\x2f\x15\xe4\x8e\xca\x3a\x21\xfd\xc2\x6d\xf7\x65\x4c\xb7\x7c\x83\x0a\x35\x6d\xa7\xad\xb4\x25\xdc\xbb\x18\x4a\x28\x8e\xb4\x44\x4d\xbc\xdc\x14\xf2\xb1\xa3\x39\x20\x97\x50\x8c\x5f\x59\x9e\x53\xf4\xb9\x0d\x17\x18\xf7\x29\x47\xf8\xf2\x5b\x06\x13\xb7\x99\xaa\x2e\xc5\x42\xd3\x69\x6e\x6e\x0d\xac\xac\xe6\xcf\x45\x6f\x95\xc0\x05\x89\x9c\x24\xf9\xe5\xf9\x71\xaa\x3b\xa6\x5c\x54\x9b\x48\xe2\x75\xf3\xe3\x7e\xb5\xf9\xb1\x5a\xaf\xb6\x72\x04\x5d\x4c\x5c\xc2\xb7\xaf\xdb\x7b\x05\x92\xeb\x14\x74\x2b\x69\x1c\x1b\x73\x8d\x26\x7a\x8f\xc9\xca\xb0\xc7\x28\x2b\xb6\x1e\xca\x46\xfa\xff\x47\xfe\x74\x7a\x79\x7e\x84\x29\x75\x1e\xd1\x39\xe4\xfb\x0b\xf2\x76\xbb\xfe\xfe\x11\x39\xc5\xc8\xff\x05\xf7\xe1\x03\xa3\x5c\x99\x3d\xe9\xbf\x8c\x69\x75\xb5\x37\xc7\xf7\xf5\x17\x1e\x69\x35\x68\x17\x30\x85\xed\x2f\x1f\x19\x37\x30\x93\x29\x55\xfd\x4e\x35\x33\xa4\x0a\x60\x78\x93\xc7\x25\x38\x01\x10\x13\x79\x1c\x7a\x3f\xd5\xc0\x71\xb5\x2c\xf7\xc7\x70\x3d\xf8\x68\xb4\xcf\xb6\xfb\x1b\x24\x77\xc9\x2d\x32\xb7\xbf\x99\x39\xe7\x8c\xfe\xea\xcf\xdc\xed\x15\xf7\xab\xff\x07\x68\x8f\x32\xf6\x32\x44\xe9\x4d\xfb\x12\xbe\x91\x02\x39\x00\x8f\x55\x83\x3a\x71\x8d\x9a\x2b\x3b\x48\x94\xb0\x5d\xd3\xdf\x01\x00\x00\xff\xff\xef\x21\x71\x6b\x45\x07\x00\x00")

func assetsModelbox_serverYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_serverYaml,
		"assets/modelbox_server.yaml",
	)
}

func assetsModelbox_serverYaml() (*asset, error) {
	bytes, err := assetsModelbox_serverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_server.yaml", size: 1861, mode: os.FileMode(436), modTime: time.Unix(1665358231, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsModelbox_server_composeYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xcf\x6e\xdb\x30\x0c\xc6\xef\x7e\x0a\xc2\xbd\x26\x6e\xfe\xac\x6b\xe1\xdb\xb0\xd3\x80\x0d\xd8\xd0\xdd\x0d\x59\xa2\x63\xa1\xb6\xe8\x89\x4c\xbb\xbc\xfd\x40\x35\xae\x93\x38\x58\x81\xcd\xa7\x56\x22\xf9\xfd\x48\x7e\xca\x0d\xfc\x6c\x11\x58\x28\x9a\x1d\x02\x1f\x58\xb0\x87\x3d\xa3\x83\x86\x62\x3a\xf7\x61\x07\x12\x8d\x0f\xfa\x87\x89\xe2\x1b\x63\x85\x33\x4d\xf4\x0c\x9e\x81\x06\xf1\x14\x4c\x07\xbe\x81\x9e\x1c\x76\x35\xfd\xd6\x73\x16\x13\x05\x1d\x18\x06\x03\x3d\x8a\x71\x46\x0c\x30\xc6\x67\x6f\x31\xbb\x81\xef\xc4\xec\xeb\x0e\xe1\xd9\x74\x7b\x64\x58\x42\xe3\x3b\x7c\x45\x58\x00\x6f\xb3\x51\xac\x3a\xe2\x95\x90\x4f\x11\x79\x96\xdd\xc0\xe3\x3b\xdc\x6f\xaa\x11\x3b\xa3\x2c\x42\xd7\x7b\xe1\xbd\x6d\x15\x34\xf1\x33\x98\xe0\xc0\xb6\x68\x9f\x06\xf2\x41\x78\x91\x0e\x3a\x1f\x50\xc5\xa8\x39\x4b\x9d\xb7\x81\x43\x8b\x3d\x46\xd3\x2d\xa0\x3f\xf0\xaf\x6e\x01\x03\xb1\xec\x22\x72\x36\x02\x9d\xb4\x34\xde\x5d\x6b\x48\x48\x7b\xba\x6c\x29\x7a\xcb\xc5\x55\x65\x1f\x7a\xec\x29\x1e\x16\x20\xbe\x47\xb6\xa6\x43\x57\x67\xc7\x94\x13\xcd\x93\xdb\x24\xfb\x25\x08\xc6\xc6\x58\x04\x0a\xf0\xd2\x7a\xdb\x82\xb4\x38\x5b\x9a\x6e\xb5\xf3\x2c\x98\xe6\xa7\x54\x01\xe5\x85\xe2\x13\x58\x0a\x01\xad\xfa\x80\xb3\xd7\x88\xca\x38\x17\x4b\xc8\xd7\xf7\x9b\x62\xb3\x2e\x56\xc5\xa6\x7c\x58\x3d\xdc\x25\xb9\x4f\xce\xf9\xa3\x67\x2c\x85\xc6\xef\xf6\xd1\xe8\xff\xa9\xe4\xb4\x62\xa8\x8d\x2e\xb4\xee\xa8\x1e\xd9\x67\x9e\xa8\xa6\xf0\x32\x83\x94\x51\x39\xaf\xc2\xb7\xd2\x0f\xb7\xa3\x1f\xb5\x86\x4e\x78\x96\xce\x5b\x4d\x8b\xb8\xf3\x14\x4a\xc8\xf7\xbc\x44\xc3\xb2\x5c\xe7\x5a\x6c\x6f\x9f\x50\x4a\xc8\xc7\x2a\xcb\xb7\xbd\xbf\xdf\x86\x0f\x82\xbb\x98\x4c\x37\x8d\xf1\xd8\xc4\xa5\x0b\xaa\x29\x58\x69\x06\x23\xed\x65\x03\x85\x33\xf2\xbe\xe8\xa5\x12\xf8\xa0\x2e\x51\x7f\x3d\xfe\xf8\x3a\xd7\x1d\xbd\xa7\xaa\x2d\xb1\x8c\xfb\x5a\x15\xab\xe2\x4e\x47\x30\x50\x94\x12\xee\x3e\x6c\x37\x19\xa8\x15\x63\x30\xfd\xb9\x69\x15\x97\xf9\x85\xa2\xd3\xe7\x49\xa4\x27\xae\x3e\x86\x8d\xf4\xff\x46\xfe\xed\x70\x15\x3a\xbd\xa9\x89\x38\x7d\x09\x7b\x7d\xaf\x36\x9b\xb0\xd3\xb7\xdd\xae\x3e\x9e\xb1\x43\x1e\x89\xe4\x1c\x7c\x46\xae\x25\xcf\xe0\x3f\x9f\x11\xeb\x4f\xde\x2b\xf7\x5f\xde\x59\x75\x72\x77\x6d\xc0\xf7\xff\x3f\xe0\x13\xca\xea\xa8\x9e\x67\x7f\x02\x00\x00\xff\xff\x55\x79\x35\xae\xd3\x05\x00\x00")

func assetsModelbox_server_composeYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsModelbox_server_composeYaml,
		"assets/modelbox_server_compose.yaml",
	)
}

func assetsModelbox_server_composeYaml() (*asset, error) {
	bytes, err := assetsModelbox_server_composeYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/modelbox_server_compose.yaml", size: 1491, mode: os.FileMode(436), modTime: time.Unix(1665358524, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/modelbox_client.yaml":         assetsModelbox_clientYaml,
	"assets/modelbox_server.yaml":         assetsModelbox_serverYaml,
	"assets/modelbox_server_compose.yaml": assetsModelbox_server_composeYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"modelbox_client.yaml":         &bintree{assetsModelbox_clientYaml, map[string]*bintree{}},
		"modelbox_server.yaml":         &bintree{assetsModelbox_serverYaml, map[string]*bintree{}},
		"modelbox_server_compose.yaml": &bintree{assetsModelbox_server_composeYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
