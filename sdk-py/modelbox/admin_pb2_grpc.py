# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import admin_pb2 as admin__pb2


class ModelBoxAdminStub(object):
    """The RPC interface used by the workers
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterAgent = channel.unary_unary(
                '/modelbox.ModelBoxAdmin/RegisterAgent',
                request_serializer=admin__pb2.RegisterAgentRequest.SerializeToString,
                response_deserializer=admin__pb2.RegisterAgentResponse.FromString,
                )
        self.Heartbeat = channel.unary_unary(
                '/modelbox.ModelBoxAdmin/Heartbeat',
                request_serializer=admin__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=admin__pb2.HeartbeatResponse.FromString,
                )
        self.GetWork = channel.unary_unary(
                '/modelbox.ModelBoxAdmin/GetWork',
                request_serializer=admin__pb2.GetWorkRequest.SerializeToString,
                response_deserializer=admin__pb2.GetWorkResponse.FromString,
                )
        self.UpdateActionStatus = channel.unary_unary(
                '/modelbox.ModelBoxAdmin/UpdateActionStatus',
                request_serializer=admin__pb2.UpdateActionStatusRequest.SerializeToString,
                response_deserializer=admin__pb2.UpdateActionStatusResponse.FromString,
                )


class ModelBoxAdminServicer(object):
    """The RPC interface used by the workers
    """

    def RegisterAgent(self, request, context):
        """Register an agent capable of running plugins
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Workers heartbeat with the server about their presence
        and work progress periodically
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWork(self, request, context):
        """Download the list of work that can be exectuted by a action runner
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateActionStatus(self, request, context):
        """Update action status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelBoxAdminServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAgent,
                    request_deserializer=admin__pb2.RegisterAgentRequest.FromString,
                    response_serializer=admin__pb2.RegisterAgentResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=admin__pb2.HeartbeatRequest.FromString,
                    response_serializer=admin__pb2.HeartbeatResponse.SerializeToString,
            ),
            'GetWork': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWork,
                    request_deserializer=admin__pb2.GetWorkRequest.FromString,
                    response_serializer=admin__pb2.GetWorkResponse.SerializeToString,
            ),
            'UpdateActionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateActionStatus,
                    request_deserializer=admin__pb2.UpdateActionStatusRequest.FromString,
                    response_serializer=admin__pb2.UpdateActionStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'modelbox.ModelBoxAdmin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelBoxAdmin(object):
    """The RPC interface used by the workers
    """

    @staticmethod
    def RegisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/modelbox.ModelBoxAdmin/RegisterAgent',
            admin__pb2.RegisterAgentRequest.SerializeToString,
            admin__pb2.RegisterAgentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/modelbox.ModelBoxAdmin/Heartbeat',
            admin__pb2.HeartbeatRequest.SerializeToString,
            admin__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/modelbox.ModelBoxAdmin/GetWork',
            admin__pb2.GetWorkRequest.SerializeToString,
            admin__pb2.GetWorkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateActionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/modelbox.ModelBoxAdmin/UpdateActionStatus',
            admin__pb2.UpdateActionStatusRequest.SerializeToString,
            admin__pb2.UpdateActionStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
