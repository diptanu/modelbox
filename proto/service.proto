syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option go_package = "github.com/tensorland/modelbox/sdk-go/proto";

package modelbox;

/**
 * ModelStore is the service exposed to upload trained models and training
 * checkpoints, and manage metadata around them.
 */
service ModelStore {
  // Create a new Model under a namespace. If no namespace is specified, models
  // are created under a default namespace.
  rpc CreateModel(CreateModelRequest) returns (CreateModelResponse);

  // List Models uploaded for a namespace 
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse);

  // Creates a new model version for a model
  rpc CreateModelVersion(CreateModelVersionRequest)
      returns (CreateModelVersionResponse);

  // Lists model versions for a model.
  rpc ListModelVersions(ListModelVersionsRequest)
      returns (ListModelVersionsResponse);

  // Creates a new experiment
  rpc CreateExperiment(CreateExperimentRequest)
      returns (CreateExperimentResponse);

  // List Experiments
  rpc ListExperiments(ListExperimentsRequest) returns (ListExperimentsResponse);

  // Get Experiments
  rpc GetExperiment(GetExperimentRequest) returns (GetExperimentResponse);

  // UploadFile streams a files to ModelBox and stores the binaries to the condfigured storage
  rpc UploadFile(stream UploadFileRequest) returns (UploadFileResponse);

  // DownloadFile downloads a file from configured storage
  rpc DownloadFile(DownloadFileRequest) returns (stream DownloadFileResponse);

  // Persists a set of metadata related to objects
  rpc UpdateMetadata(UpdateMetadataRequest) returns (UpdateMetadataResponse);

  // Lists metadata associated with an object
  rpc ListMetadata(ListMetadataRequest) returns (ListMetadataResponse);

  // Tracks a set of artifacts with a experiment/checkpoint/model
  rpc TrackArtifacts(TrackArtifactsRequest) returns (TrackArtifactsResponse);

  // List artifacts for an expriment/model/model version
  rpc ListArtifacts(ListArtifactsRequest) returns (ListArtifactsResponse);

  // Log Metrics for an experiment, model or checkpoint
  rpc LogMetrics(LogMetricsRequest) returns (LogMetricsResponse);

  // Get metrics logged for an experiment, model or checkpoint.
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);

  // Log an event from any system interacting with metadata of a experiment, models or
  // using a trained model or checkpoint.
  rpc LogEvent(LogEventRequest) returns (LogEventResponse);

  // List events logged for an experiment/model, etc.
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse);

  // Streams change events in any of objects such as experiments, models, etc, for a given namespace
  // Response is a json representation of the new state of the obejct
  rpc WatchNamespace(WatchNamespaceRequest) returns (stream WatchNamespaceResponse);
}

// Request to watch events in a namespace, such as experiments/models/mocel versions
// being created or updated.  
message WatchNamespaceRequest {
  string namespace = 1;

  uint64 since = 2;
}

enum ChangeEvent {
  CHANGE_EVENT_UNDEFINED  = 0;

  OBJECT_CREATED = 1;

  OBJECT_UPDATED = 2;
}

message WatchNamespaceResponse {
  ChangeEvent event = 1;

  google.protobuf.Value payload = 2;
}

// Metrics contain the metric values for a given key
message Metrics {
  string key = 1;

  repeated MetricsValue values = 2;
}

// Metric Value at a given point of time.
message MetricsValue {
  uint64 step = 1;

  uint64 wallclock_time = 2;

  oneof value {
     float f_val = 5;

     string s_tensor = 6;

     bytes b_tensor = 7;
  }
}

// Message for logging a metric value at a given time
message LogMetricsRequest {
  string parent_id = 1;

  string key = 2;

  MetricsValue value = 3;
}

message LogMetricsResponse {}

message GetMetricsRequest {
  string parent_id = 1;
}

message GetMetricsResponse {
  map<string, Metrics> metrics = 1;
}

message TrackArtifactsRequest {
  string name = 1;
  string object_id = 2;
  repeated FileMetadata files = 3;
}

message TrackArtifactsResponse {
  string id =  1;
}

message ListArtifactsRequest {
  string object_id = 1;
}

message ListArtifactsResponse {
  repeated Artifact artifacts = 1;
}

/*
 * FileMetadata contains information about the file associated with a model version
 * such as model binaries, other meta data files related to the model.
 * This could either be sent as part of the model version creation request to track files
 * already managed by another storage service, or as the first message while uploading a file 
 * to be managed by ModelBox.
 */
message FileMetadata {
  string id = 1;

  // The ID of the experiment, model to which this file belongs to
  string parent_id = 2;

  // MIMEType of the file
  FileType file_type = 3;

  // checksum of the file 
  string checksum = 4;

  // path of the file
  string src_path = 5;

  // path of uploaded file 
  string upload_path = 6;

  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
}

enum FileType {
  UNDEFINED = 0;
  MODEL = 1;
  CHECKPOINT = 2;
  TEXT = 3;
  IMAGE = 4;
  AUDIO = 5;
  VIDEO = 6;
}

message DownloadFileRequest { string file_id = 1; }

message DownloadFileResponse {
  oneof stream_frame {
    FileMetadata metadata = 1;
    bytes chunks = 2;
  }
}

message UploadFileRequest {
  oneof stream_frame {
    UploadFileMetadata metadata = 1;
    bytes chunks = 2;
  }
}

message UploadFileResponse {
  string file_id = 1;
  string artifact_id = 2;
}

message UploadFileMetadata {
  string artifact_name = 1;
  string object_id = 2;
  FileMetadata metadata = 3;
}

message Artifact {
  string id = 1;
  string name = 2;
  string object_id = 3;
  repeated FileMetadata files = 4;
}

/*
 * Model contains metadata about a model which solves a particular use case.
 */
message Model {
  string id = 1;
  string name = 2;
  string owner = 3;
  string namespace = 4;
  string description = 5;
  string task = 6;
  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
}

/**
 * Create a new Model. If the id points to an existing model a new model version
 * is created.
 */
message CreateModelRequest {
  string name = 2;
  string owner = 3;
  string namespace = 4;
  string task = 5;
  string description = 6;
}

message CreateModelResponse {
  string id = 1;
  bool exists = 2;
  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
}

/*
 * Deep Learning frameworks known to ModelBox
 */
enum MLFramework {
  UNKNOWN = 0;
  PYTORCH = 1;
  KERAS = 2;
}

/**
 * ModelVersion contains a trained model binary, metrics related to the mode
 * such as accuracy on various datasets, performance on a hardware, etc. Model
 * Versions are always linked to a model.
 */
message ModelVersion {
  string id = 1;
  string model_id = 2;
  string name = 3;
  string version = 4;
  string description = 5;
  MLFramework framework = 8;
  repeated string unique_tags = 9;
  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
}

message CreateModelVersionRequest { 
  string model = 1;
  string name = 2;
  string version = 3;
  string description = 4;
  string namespace = 5;
  MLFramework framework = 8;
  repeated string unique_tags = 9;
}

message CreateModelVersionResponse { 
  string model_version = 1; 
  bool exists = 2;
  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
}

/**
 * Experiments are the sources of Model checkpoints. They track various details
 * related to the training runs which created the models such as hyper
 * parameters, etc.
 */
message Experiment {
  string id = 1;
  string name = 2;
  string namespace = 3;
  string owner = 4;
  MLFramework framework = 5;
  string external_id = 7;
  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
}

message CreateExperimentRequest {
  string name = 1;
  string owner = 2;
  string namespace = 3;
  MLFramework framework = 4;
  string task = 5;
  string external_id = 7;
}

message CreateExperimentResponse {
  string experiment_id = 1;
  bool experiment_exists = 2;
  google.protobuf.Timestamp created_at = 20;
  google.protobuf.Timestamp updated_at = 21;
}

message ListExperimentsRequest { string namespace= 1; }

message ListExperimentsResponse { repeated Experiment experiments = 1; }

message ListModelVersionsRequest { string model = 1; }

message ListModelVersionsResponse { repeated ModelVersion model_versions = 1; }

message ListModelsRequest { string namespace = 1; }

message ListModelsResponse { repeated Model models = 1; }

message Metadata {
  map<string, string> metadata = 1;
}

message UpdateMetadataRequest {
  string parent_id = 1;
  Metadata metadata = 2;
}

message UpdateMetadataResponse {
}

message ListMetadataRequest {
  string parent_id = 1;
}

message ListMetadataResponse {
  Metadata metadata = 1;
}

message EventSource {
  string name = 1;
}

message Event {
  string name = 2;
  EventSource source = 3;
  google.protobuf.Timestamp wallclock_time = 4;
  Metadata metadata = 5;
}

/**
 * Contains information about an event being logged about
 * an experiment or a model or a checkpoint by any system interacting 
 * or using the object.
 */
message LogEventRequest {
  string parent_id = 1;
  Event event = 2;
}

message LogEventResponse {
  google.protobuf.Timestamp created_at = 1;
}

message ListEventsRequest {
  string parent_id = 1;
  google.protobuf.Timestamp since = 2;
}

message ListEventsResponse {
  repeated Event events = 1;
}

message GetExperimentRequest {
  string id = 1;
}

message GetExperimentResponse {
  Experiment experiment = 1;
}